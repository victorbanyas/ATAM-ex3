. = torg + 1000

main:
	mov pc, sp
	tst -(sp)	;Initialize the stack
quit:
	halt
	
	
isPrefix:
	jsr pc, prefixCheck
	cmp r1, #1
	beq pref_conf
	mov #0, r1
pref_conf:
	rts pc
	
prefixCheck:
	mov r0, -(sp)
	mov r1, -(sp)
	mov r2, -(sp)
cont_check:
	cmpb (r1), #'@
	beq is_pref		;If end of prefix is reached, then it's actually a prefix
	cmpb (r0), #'@
	beq n_pref		;If end of word is reached before, then it's not a prefix
	cmpb (r1)+, (r0)+
	beq cont_check		;Keep looking for a mistake, or run until end of prefix/word is reached
	cmp r2, #0
	beq n_pref		;If no more mistakes allowed, then it's not a prefix
	dec r2		;A mistake was found
	
;In the following branches, we try to change the prefix as allowed in order to find match with the word.
;Each time we make a single change, and call the subroutine recursively, while it tries to find a match for
;the sub-prefix and the sub-word, which start at the committed change

skip_let:		;Try to find match through skipping a letter (Making a substitution by the correct letter)
	jsr pc, prefixCheck		;Continue checking the rest as a sub-prefix of a sub-word
	cmp r1, #1		;If a match was found, there's no need to check further
	beq is_pref
sub_let:		;Try to find match through substracting a letter (Skipping a letter of the prefix only)
	tstb -(r0)		;Return to the previous letter in the word (Auto-Increment effect)
	jsr pc, prefixCheck
	cmp r1, #1
	beq is_pref
add_let:		;Try to find a match through adding a letter (Skipping a letter of the word only)
	tstb -(r1)		;Return to the previous letter in the prefix (Auto-Increment effect)
	jsr pc, prefixCheck
	cmp r1, #1
	bne n_pref
is_pref:		
	mov #1, r1
	mov (sp)+, r2
	tst (sp)+
	mov (sp)+, r0
	rts pc
n_pref:
	mov (sp)+, r2
	mov (sp)+, r1
	mov (sp)+, r0
	rts pc
	
isStart:
  mov r0, -(sp)
  mov r1, -(sp)
  mov r2, -(sp)
  mov r3, -(sp) ;Saving the register's values for later.
  mov r1, (r5)+ ;Moving length into r1(inline). COULD POTENTIALLY BE PROBLEMATIC
  mov r2, (r5)+ ;Moving str address into r2;
  mov r0, #Setmin
  mov r5, #1 ;Setting the default return value to 1.
starterLoop:  cmpb (r0), (r2)+  ;Check if the current char is the minimal one.
  bne notStarter
  sob r1, starterLoop
  br endIsStart
notStarter: mov r5, #0 ;Setting the return value to 0
endIsStart: mov (sp)+, r3
      mov (sp)+, r2
      mov (sp)+, r1
      mov (sp)+, r0 ;Restoring the values
      tst (sp)+
      mov r5, -(sp) ;Save the return value in the stack.
      rts r5

nextString:
  mov r0, -(sp)
  mov r1, -(sp) ;Save the registers
  mov 8(sp), r0 ;Save the length in r0
  mov 10(sp), r1 ;Save the address in r1
  mov r2, -(sp)
  mov r3, -(sp)
  mov r4, -(sp)
  mov #Delim, r2
  mov #Setmax, r3
  mov #Setmin, r4
  
 nextStringLoop:
  cmpb r0(r1), (r2)  ;COULD POTENTIALLY CAUSE PROBLEMS -compare the delim to the current one
  be updateString
  cmpb r0(r1), (r3) ;If the char isn't the delim, compare it to the biggest one in the alphabet
  bne nextChar
  movb (r2), r0(r1) ;If the char is the biggest one in the alphabet, replace it with the delim
contLoop: sob r0, nextStringLoop
nextChar: ADD 1, 'r0(r1) ;COULD POTENTIALLY NOT WORK- move to the next character
  cmp r0, #0 ;If this wasn't the first character, return to the loop
  bne contLoop
endNextString:
  mov (sp)+, r4
  mov (sp)+, r3
  mov (sp)+, r2
  mov (sp)+, r1
  mov (sp)+, r0
  rts pc
updateString: mov (r4), r0(r1)
  cmp r0, #0 ;If you're reached the first char, end the subroutine.
  be endNextString
  dec r0 ;Move to the previous char
  br nextStringLoop
