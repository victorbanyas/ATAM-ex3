. = torg + 1000
main:
  mov pc, sp
  tst -(sp) ;Initialize the stack
  ;FIRST TEST USING WORD ONE
  mov #word1, r0
  jsr r5, isStart ;SHOULD RETURN 0
  .word 3
  .word word1
  cmp r5, 0
  bne ending
  mov r0, -(sp) ;Push the address
  mov #2, -(sp) ;Push the length and get the next string
  jsr pc, nextString
  mov (sp)+, r2 ;Remove the length from the stack
  mov r0, -(sp) ;Push the same address for self comparison(SHOULD RETURN 1)
  jsr pc, wordIsEqual
  tst (sp)+ ;Reset the stack
  mov #word2, r0
  jsr r5, isStart ;SHOULD RETURN 0
  .word 1
  .word word2
  mov r0, -(sp)
  mov #1, -(sp) ;Get next string
  jsr pc, nextString
  mov (sp)+, r2
  mov #word1, r2
  mov r2, -(sp) ;Compare word2 with word1
  jsr pc, wordIsEqual
  mov #word3, r0 ;
  jsr r5, isStart ;Move to the next word and check if it's the starter
  .word 1
  .word word3
  mov r0, -(sp)
  mov #1, -(sp) ;Advance it by 1
  jsr pc, nextString
  mov (sp)+, r2
  mov #word4, r2
  mov r2, -(sp) ;Compare updated word 3 and four(Should return 1)
  jsr pc, wordIsEqual
  mov #word4, r0
  jsr r5, isStart ;Check if word no 4 is a starter.
  .word 0
  .word word4
  mov r0, -(sp)
  mov #0, -(sp) ;The word length is zero
  jsr pc, nextString
  mov (sp)+, r2
  mov r0, -(sp) ;Compare null word to itself
  jsr pc, wordIsEqual
  mov #word5, r0
  jsr r5, isStart ;Should return 1 for word5
  .word 3
  .word word5
  mov r0, -(sp)
  mov #3, -(sp) ;Advance it by 1
  jsr pc, nextString
  mov (sp)+, r2
  mov r0, -(sp) ;Compare it to itself
  jsr pc, wordIsEqual
  mov #word6, r0
  jsr r5, isStart ;Shouldn't work.
  .word 3
  .word word6
  mov r0, -(sp)
  mov #3, -(sp) ;Advance it by 1
  jsr pc, nextString
  mov (sp)+, r2
  mov #word5, r0
  mov r0, -(sp) ;Compare it to the previous starter(should return 0);
  jsr pc, wordIsEqual
  mov #word7, r0
  jsr r5, isStart ;Should return 0
  .word 3
  .word word7
  mov r0, -(sp)
  mov #3, -(sp) ;Advance it by 1
  jsr pc, nextString
  mov (sp)+, r2
  mov r0, -(sp) ;Compare it to itself
  jsr pc, wordIsEqual
ending:halt



isStart:
  mov r0, -(sp)
  mov r1, -(sp)
  mov r2, -(sp)
  mov r3, -(sp) ;Saving the register's values for later.
  mov (r5)+, r1 ;Moving length into r1(inline). COULD POTENTIALLY BE PROBLEMATIC
  mov (r5)+, r2 ;Moving str address into r2;
  mov #Setmin, r0
  mov #1, r3 ;Setting the default return value to 1.
starterLoop:  cmpb (r0), (r2)+  ;Check if the current char is the minimal one.
  bne notStarter
  sob r1, starterLoop
  br endIsStart
notStarter: mov #0, r3 ;Setting the return value to 0
endIsStart: mov r3, 8(sp)
	mov (sp)+, r3
	mov (sp)+, r2
	mov (sp)+, r1
	mov (sp)+, r0 ;Restoring the values
	rts r5
  
  
nextString:
  mov r0, -(sp)
  mov r1, -(sp) ;Save the registers
  mov 6(sp), r0 ;Save the length in r0
  mov 8(sp), r1 ;Save the address in r1
  mov r2, -(sp)
  mov r3, -(sp)
  mov r4, -(sp)
  mov r5, -(sp)
  mov #Delim, r2
  mov #Setmax, r3
  mov #Setmin, r4
  cmp r0, #0
  beq endNextString
  mov r1, r5
  add r0, r5  ;r5 now points to the end of the string.
nextStrLoop:
  dec r5
  cmpb (r5), (r2)  ;COULD POTENTIALLY CAUSE PROBLEMS -compare the delim to the current one
  beq updateString
  cmpb (r5), (r3) ;If the char isn't the delim, compare it to the biggest one in the alphabet
  bne nextChar
  movb (r2), (r5) ;If the char is the biggest one in the alphabet, replace it with the delim
  cmp r1, r5
  beq endNextString
contLoop: br nextStrLoop
nextChar: incb (r5) ;COULD POTENTIALLY NOT WORK- move to the next character
  cmp r5, r1 ;If this wasn't the first character, return to the loop
  bne contLoop
endNextString:
  mov (sp)+, r5
  mov (sp)+, r4
  mov (sp)+, r3
  mov (sp)+, r2
  mov (sp)+, r1
  mov (sp)+, r0
  rts pc
updateString: movb (r4), (r5)
  cmp r1, r5 ;If you're reached the first char, end the subroutine.
  beq endNextString
  br nextStrLoop

wordIsEqual: mov r0, -(sp)
  mov r1, -(sp)
  mov 6(sp), r0 ;Move the first address into r0
  mov 8(sp), r1 ;Move the second address into r1
  mov r2, -(sp)
  mov #1, r2 ;Set the return value to 1
compLoop: cmpb (r0), (r1) ;Compare the letters
  bne notEqual ;If they aren't rqual, leave the loop
  cmpb (r0), #'@ ;If they're equal to the ending char, leave the loop
  beq endWordIsEqual
  inc r0
  inc r1
  br compLoop ;Jump back to the loop if none of the conditions have been met
notEqual: mov #0, r2 ;If there's no match, set the return value to 0
endWordIsEqual: mov r2, 14(sp) ;Save the return value before the input
  mov (sp)+, r2
  mov (sp)+, r1
  mov (sp)+, r0 ;Restore the values
  rts pc

Setmin: .byte 'A
Setmax: .byte 'C
Delim: .byte ' ;this is a space
 .even
Dict: .word word1, word2, word3, word4, word5, word6, word7
DictLen: .word 7
Sent: .ascii <AB@>
 .even
X: .word 4
MaxLen: .word 6
word1: .ascii <AC@>
word2: .ascii <B@>
word3: .ascii <C@>
word4: .ascii <@>
word5: .ascii <AAA@>
word6: .ascii <   @>
word7: .ascii <CCC@>
